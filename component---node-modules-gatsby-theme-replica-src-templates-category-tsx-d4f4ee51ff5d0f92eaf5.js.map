{"version":3,"sources":["webpack:///./node_modules/gatsby-theme-replica/src/templates/category.tsx","webpack:///./node_modules/gatsby-theme-replica/src/components/PostList.tsx","webpack:///./node_modules/gatsby-theme-replica/src/utils/date.ts","webpack:///./node_modules/gatsby-theme-replica/src/components/Tag.tsx","webpack:///./node_modules/gatsby-theme-replica/_gatsby/utils/date.js"],"names":["query","CategoryTemplate","data","pageContext","allMdx","totalCount","posts","nodes","category","mode","LayoutMode","NavTab","className","PostList","map","post","key","id","to","fields","slug","frontmatter","title","excerpt","tags","tag","data-date","date","getDateString","size","require","format","Date","toLocaleDateString","timeZone","process","TZ","month","day","getRelativeTimeFromNow","diff","now","getTime","min","hour","week","year","keys","unit","i","length","num","Math","ceil","Tag","count","url","TAG_DIR","slugify","module","exports","d","Number","isNaN"],"mappings":"4FACA,8FAMaA,EAAQ,aAqDNC,UAdqB,SAAC,GAA0B,IAAxBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YAAkB,EACxBD,EAAKE,OAAlCC,EADqD,EACrDA,WAAmBC,EADkC,EACzCC,MACZC,EAAaL,EAAbK,SACR,OACE,kBAAC,IAAD,CAAQC,KAAMC,IAAWC,QACvB,yBAAKC,UAAS,yBACZ,gCAASP,GADX,QACqCA,EAAa,EAAI,IAAM,GAD5D,gBAEW,gCAASG,GAAY,kBAEhC,kBAAC,IAAD,CAAUF,MAAOA,O,kCCvDvB,yEAgDeO,IApCa,SAAC,GAAc,IAAZP,EAAY,EAAZA,MAC7B,OACE,4BACGA,aADH,EACGA,EAAOQ,KAAI,SAACC,GAAD,eACV,wBAAIC,IAAKD,EAAKE,GAAIL,UAAS,sBACzB,yBAAKA,UAAU,WACb,wBAAIA,UAAU,8BACZ,kBAAC,IAAD,CAAMM,GAAIH,EAAKI,OAAOC,MAAOL,EAAKM,YAAYC,MAA9C,MAEF,uBAAGV,UAAU,+BAA+BG,EAAKQ,SACjD,yBAAKX,UAAS,QAAd,UACGG,EAAKM,mBADR,iBACG,EAAkBG,YADrB,aACG,EAAwBV,KACvB,SAACW,GAAD,OAASA,GAAO,kBAAC,IAAD,CAAKA,IAAKA,EAAKT,IAAKS,QAGxC,yBAAKb,UAAU,0BAAf,YACY,IACV,0BAAMc,YAAWX,EAAKM,YAAYM,MAC/BC,YAAcb,EAAKM,YAAYM,SAItC,yBAAKf,UAAU,wCACb,yBACEA,UAAS,mFAET,kBAAC,IAAD,CAAQiB,KAAM,KACd,0BAAMjB,UAAS,QAAf,iB,kCCvCd,0GAGagB,EAHIE,EAAQ,QAIdF,cAEEG,EAAS,SAACJ,GAAD,OACpB,IAAIK,KAAKL,GAAMM,mBAAmB,QAAS,CACzCC,SAAUC,GAAYC,IAAM,MAC5BC,MAAO,QACPC,IAAK,aAGIC,EAAyB,SAACZ,GAuBrC,IAtBA,IAEMW,EAAM,MAONE,EAFMR,KAAKS,MACN,IAAIT,KAAKL,GAAMe,UAGpB5B,EAA8B,CAClC6B,IAZU,IAaVC,KAZWD,KAaXL,MACAO,KAZW,OAaXR,MAZY,OAaZS,KAZWR,SAePS,EAAO,CAAC,MAAO,OAAQ,MAAO,OAAQ,QAAS,QACjDC,EAAOD,EAAK,GACPE,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAG/B,GAAIT,EAAO1B,EAFXkC,EAAOD,EAAKE,IAEU,CACpB,GAAU,IAANA,EACF,MAAO,WAEPD,EAAOD,EAAKE,EAAI,GAElB,MAIJ,IAAME,EAAMC,KAAKC,KAAKb,EAAO1B,EAAIkC,IAAS,EAC1C,OAAUG,EAAV,IAAiBH,GAAOG,EAAM,EAAI,IAAM,IAAxC,S,kCClDF,6DAoBeG,IATW,SAAC,GAAmB,IAAjB7B,EAAiB,EAAjBA,IAAK8B,EAAY,EAAZA,MAC1BC,EAAM,IAAIC,UAAP,IAAkBC,kBAAQjC,GACnC,OACE,kBAAC,IAAD,CAAMP,GAAIsC,EAAK5C,UAAS,aACrBa,EADH,IACQ,0BAAMb,UAAS,iBAAoB2C,M,mBCL/CI,EAAOC,QAAU,CACfhC,cAXoB,SAACD,GACrB,IAAKA,EAAM,MAAO,GAClB,IAAMkC,EAAI,IAAI7B,KAAKL,GACnB,OAAImC,OAAOC,MAAMF,EAAEnB,WAAmB,GAE/BmB,EAAE5B,mBAAmB,QAAS,CACnCC,SAAUC,GAAYC,IAAM","file":"component---node-modules-gatsby-theme-replica-src-templates-category-tsx-d4f4ee51ff5d0f92eaf5.js","sourcesContent":["import { graphql } from 'gatsby';\nimport React, { FC } from 'react';\n\nimport Layout, { LayoutMode } from '../components/Layout';\nimport PostList from '../components/PostList';\nimport { PostNode } from '../types/post';\n\nexport const query = graphql`\n  query CategoryPostsQuery($category: String) {\n    allMdx(\n      filter: {\n        slug: { ne: \"README\" }\n        frontmatter: { category: { eq: $category } }\n      }\n      sort: { order: DESC, fields: frontmatter___date }\n    ) {\n      nodes {\n        id\n        excerpt(pruneLength: 200)\n        frontmatter {\n          title\n          date\n          tags\n        }\n        fields {\n          slug\n        }\n        slug\n      }\n      totalCount\n    }\n  }\n`;\n\ninterface Props {\n  pageContext: {\n    category: string;\n  };\n  data: {\n    allMdx: {\n      nodes: PostNode[];\n      totalCount: number;\n    };\n  };\n}\n\nconst CategoryTemplate: FC<Props> = ({ data, pageContext }) => {\n  const { totalCount, nodes: posts } = data.allMdx;\n  const { category } = pageContext;\n  return (\n    <Layout mode={LayoutMode.NavTab}>\n      <div className={`text-sm border-b pb-4`}>\n        <strong>{totalCount}</strong> post{totalCount > 1 ? 's' : ''} in\n        category <strong>{category || 'Uncategorized'}</strong>\n      </div>\n      <PostList posts={posts} />\n    </Layout>\n  );\n};\n\nexport default CategoryTemplate;\n","import { Link } from 'gatsby';\nimport React, { FC } from 'react';\nimport { FiStar } from 'react-icons/fi';\n\nimport { PostNode } from '../types/post';\nimport { getDateString } from '../utils/date';\nimport Tag from './Tag';\n\ninterface Props {\n  posts: PostNode[];\n}\n\nconst PostList: FC<Props> = ({ posts }) => {\n  return (\n    <ul>\n      {posts?.map((post) => (\n        <li key={post.id} className={`py-6 border-b flex`}>\n          <div className='w-10/12'>\n            <h3 className='mb-1 font-semibold text-lg'>\n              <Link to={post.fields.slug}>{post.frontmatter.title} </Link>\n            </h3>\n            <p className='my-2 text-sm text-gray-main'>{post.excerpt}</p>\n            <div className={`py-1`}>\n              {post.frontmatter?.tags?.map(\n                (tag) => tag && <Tag tag={tag} key={tag} />\n              )}\n            </div>\n            <div className='text-xs text-gray-main'>\n              Posted on{' '}\n              <time data-date={post.frontmatter.date}>\n                {getDateString(post.frontmatter.date)}\n              </time>\n            </div>\n          </div>\n          <div className='w-2/12 flex items-center justify-end'>\n            <div\n              className={`text-xs px-3 py-1 border bg-gray-100 rounded-md font-semibold flex items-center`}\n            >\n              <FiStar size={16} />\n              <span className={`pl-1`}>star</span>\n            </div>\n          </div>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default PostList;\n","const dateUtil = require('../../_gatsby/utils/date');\n// yyyy-MM-dd\ntype InputDate = Date | string | number;\nexport const getDateString: (date: InputDate) => string =\n  dateUtil.getDateString;\n\nexport const format = (date: InputDate) =>\n  new Date(date).toLocaleDateString('en-US', {\n    timeZone: process.env.TZ || 'UTC',\n    month: 'short',\n    day: 'numeric',\n  });\n\nexport const getRelativeTimeFromNow = (date: InputDate) => {\n  const min = 60 * 1000;\n  const hour = min * 60;\n  const day = 24 * hour;\n  const week = 7 * day;\n  const month = 30 * day;\n  const year = day * 365;\n\n  const now = Date.now();\n  const ts = new Date(date).getTime();\n  const diff = now - ts;\n\n  const map: Record<string, number> = {\n    min,\n    hour,\n    day,\n    week,\n    month,\n    year,\n  };\n\n  const keys = ['min', 'hour', 'day', 'week', 'month', 'year'];\n  let unit = keys[0];\n  for (let i = 0; i < keys.length; i++) {\n    unit = keys[i];\n\n    if (diff < map[unit]) {\n      if (i === 0) {\n        return 'Just now';\n      } else {\n        unit = keys[i - 1];\n      }\n      break;\n    }\n  }\n\n  const num = Math.ceil(diff / map[unit]) - 1;\n  return `${num} ${unit}${num > 1 ? 's' : ''} ago`;\n};\n","import { Link } from 'gatsby';\nimport React, { FC } from 'react';\n\nimport { TAG_DIR } from '../constants/key';\nimport { slugify } from '../utils/slugify';\n\ninterface TagProps {\n  tag: string;\n  count?: number;\n}\n\nconst Tag: FC<TagProps> = ({ tag, count }) => {\n  const url = `/${TAG_DIR}/${slugify(tag)}`;\n  return (\n    <Link to={url} className={`topic-tag`}>\n      {tag} <span className={`font-semibold`}>{count}</span>\n    </Link>\n  );\n};\n\nexport default Tag;\n","const getDateString = (date) => {\n  if (!date) return '';\n  const d = new Date(date);\n  if (Number.isNaN(d.getTime())) return '';\n\n  return d.toLocaleDateString('fr-CA', {\n    timeZone: process.env.TZ || 'UTC',\n  });\n};\n\nmodule.exports = {\n  getDateString,\n};\n"],"sourceRoot":""}