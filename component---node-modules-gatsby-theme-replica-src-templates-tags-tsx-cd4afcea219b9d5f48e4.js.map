{"version":3,"sources":["webpack:///./node_modules/gatsby-theme-replica/src/templates/tags.tsx","webpack:///./node_modules/gatsby-theme-replica/src/components/Tag.tsx"],"names":["query","TagsTemplate","data","tags","Object","entries","allMdx","nodes","reduce","acc","posts","frontmatter","forEach","tag","count","mode","LayoutMode","NavTab","map","key","Tag","url","TAG_DIR","slugify","to","className"],"mappings":"4FACA,8FAKaA,EAAQ,aA8CNC,UAtBiB,SAAC,GAAa,IAAXC,EAAW,EAAXA,KAG3BC,EAAOC,OAAOC,QAClBH,EAAKI,OAAOC,MAAMC,QAA+B,SAACC,EAAKC,GACrD,IAAMP,EAAOO,EAAMC,YAAYR,KAK/B,OAJAA,WAAMS,SAAQ,SAACC,GACb,IAAMC,EAAQL,EAAII,IAAQ,EAC1BJ,EAAII,GAAOC,EAAQ,KAEdL,IACN,KAEL,OACE,kBAAC,IAAD,CAAQM,KAAMC,IAAWC,QACtBd,EAAKe,KAAI,gBAAEL,EAAF,KAAOC,EAAP,YACR,kBAAC,IAAD,CAAKK,IAAKN,EAAKA,IAAKA,EAAKC,MAAOA,U,kCC9CxC,6DAoBeM,IATW,SAAC,GAAmB,IAAjBP,EAAiB,EAAjBA,IAAKC,EAAY,EAAZA,MAC1BO,EAAM,IAAIC,UAAP,IAAkBC,kBAAQV,GACnC,OACE,kBAAC,IAAD,CAAMW,GAAIH,EAAKI,UAAS,aACrBZ,EADH,IACQ,0BAAMY,UAAS,iBAAoBX","file":"component---node-modules-gatsby-theme-replica-src-templates-tags-tsx-cd4afcea219b9d5f48e4.js","sourcesContent":["import { graphql } from 'gatsby';\nimport React, { FC } from 'react';\n\nimport Layout, { LayoutMode } from '../components/Layout';\nimport Tag from '../components/Tag';\n\nexport const query = graphql`\n  query TagListQuery {\n    allMdx(filter: { slug: { ne: \"README\" } }) {\n      nodes {\n        frontmatter {\n          tags\n        }\n      }\n    }\n  }\n`;\n\ninterface Props {\n  data: {\n    allMdx: {\n      nodes: {\n        frontmatter: {\n          tags: string[];\n        };\n      }[];\n    };\n  };\n}\n\nconst TagsTemplate: FC<Props> = ({ data }) => {\n  // todo allow sort by alphabet & count\n  // lower case\n  const tags = Object.entries(\n    data.allMdx.nodes.reduce<Record<string, number>>((acc, posts) => {\n      const tags = posts.frontmatter.tags;\n      tags?.forEach((tag) => {\n        const count = acc[tag] || 0;\n        acc[tag] = count + 1;\n      });\n      return acc;\n    }, {})\n  );\n  return (\n    <Layout mode={LayoutMode.NavTab}>\n      {tags.map(([tag, count]) => (\n        <Tag key={tag} tag={tag} count={count} />\n      ))}\n    </Layout>\n  );\n};\n\nexport default TagsTemplate;\n","import { Link } from 'gatsby';\nimport React, { FC } from 'react';\n\nimport { TAG_DIR } from '../constants/key';\nimport { slugify } from '../utils/slugify';\n\ninterface TagProps {\n  tag: string;\n  count?: number;\n}\n\nconst Tag: FC<TagProps> = ({ tag, count }) => {\n  const url = `/${TAG_DIR}/${slugify(tag)}`;\n  return (\n    <Link to={url} className={`topic-tag`}>\n      {tag} <span className={`font-semibold`}>{count}</span>\n    </Link>\n  );\n};\n\nexport default Tag;\n"],"sourceRoot":""}